using System;
using System.Collections;
using UnityEngine;
using UnityEngine.Networking;

[Serializable]
public class WeatherData
{
    public Weather[] weather;
    public Main main;

    [Serializable]
    public class Weather
    {
        public string main;
        public string description;
    }

    [Serializable]
    public class Main
    {
        public float temp;
        public float humidity;
    }
}

public class WeatherAPIManager : MonoBehaviour
{
    public static WeatherAPIManager Instance;

    [Header("API Settings")]
    public string apiKey = "YOUR_API_KEY_HERE";
    public string city = "New York";
    private const string baseUrl = "https://api.openweathermap.org/data/2.5/weather";

    [Header("Game Weather Sync")]
    public Material skyboxMaterial;
    public Light directionalLight;

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    private void Start()
    {
        StartCoroutine(GetWeather());
    }

    private IEnumerator GetWeather()
    {
        string url = $"{baseUrl}?q={city}&appid={apiKey}&units=metric";

        UnityWebRequest request = UnityWebRequest.Get(url);
        yield return request.SendWebRequest();

        if (request.result != UnityWebRequest.Result.Success)
        {
            Debug.LogWarning("Weather API request failed: " + request.error);
        }
        else
        {
            WeatherData data = JsonUtility.FromJson<WeatherData>(request.downloadHandler.text);
            ApplyWeatherToScene(data);
        }
    }

    private void ApplyWeatherToScene(WeatherData data)
    {
        string condition = data.weather[0].main.ToLower();
        Debug.Log($"Weather: {condition}, Temp: {data.main.temp}Â°C");

        switch (condition)
        {
            case "clear":
                skyboxMaterial.SetColor("_Tint", new Color(0.8f, 0.9f, 1f));
                directionalLight.intensity = 1.2f;
                break;
            case "rain":
                skyboxMaterial.SetColor("_Tint", new Color(0.4f, 0.4f, 0.6f));
                directionalLight.intensity = 0.6f;
                // TODO: Trigger rain particle system
                break;
            case "clouds":
                skyboxMaterial.SetColor("_Tint", new Color(0.6f, 0.6f, 0.7f));
                directionalLight.intensity = 0.8f;
                break;
            default:
                skyboxMaterial.SetColor("_Tint", new Color(0.5f, 0.5f, 0.5f));
                directionalLight.intensity = 0.7f;
                break;
        }
    }
}
